// <auto-generated />
using System;
using System.Collections.Generic;
using Lyceum.Infrastructure.Ef;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lyceum.Infrastructure.Ef.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lyceum.Domain.Entities.Component", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultImgId")
                        .HasColumnType("text");

                    b.Property<int?>("Dislikes")
                        .HasColumnType("integer");

                    b.Property<string>("Features")
                        .HasColumnType("text");

                    b.Property<string>("FullInfo")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("Likes")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateDate")
                        .HasColumnType("text");

                    b.Property<string>("Views")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Component");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Age")
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .HasColumnType("text");

                    b.Property<string>("FullInfo")
                        .HasColumnType("text");

                    b.Property<string>("Img")
                        .HasColumnType("text");

                    b.Property<string>("JobPosition")
                        .HasColumnType("text");

                    b.Property<string>("SocialNetwork")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.Achievement", b =>
                {
                    b.HasBaseType("Lyceum.Domain.Entities.Component");

                    b.ToTable("Achievement");
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.AddCourse", b =>
                {
                    b.HasBaseType("Lyceum.Domain.Entities.Component");

                    b.Property<string>("CourseDuration")
                        .HasColumnType("text");

                    b.ToTable("AddCourse");
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.History", b =>
                {
                    b.HasBaseType("Lyceum.Domain.Entities.Component");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.ToTable("History");
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.News", b =>
                {
                    b.HasBaseType("Lyceum.Domain.Entities.Component");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.ParentСommission", b =>
                {
                    b.HasBaseType("Lyceum.Domain.Entities.Component");

                    b.ToTable("ParentСommission");
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.Stakeholder", b =>
                {
                    b.HasBaseType("Lyceum.Domain.Entities.Component");

                    b.ToTable("Stakeholder");
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.Student", b =>
                {
                    b.HasBaseType("Lyceum.Domain.Entities.Person");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.Teacher", b =>
                {
                    b.HasBaseType("Lyceum.Domain.Entities.Person");

                    b.Property<string>("AcademicDegree")
                        .HasColumnType("text");

                    b.Property<string>("Rank")
                        .HasColumnType("text");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.Achievement", b =>
                {
                    b.HasOne("Lyceum.Domain.Entities.Component", null)
                        .WithOne()
                        .HasForeignKey("Lyceum.Domain.Entities.Achievement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.AddCourse", b =>
                {
                    b.HasOne("Lyceum.Domain.Entities.Component", null)
                        .WithOne()
                        .HasForeignKey("Lyceum.Domain.Entities.AddCourse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.History", b =>
                {
                    b.HasOne("Lyceum.Domain.Entities.Component", null)
                        .WithOne()
                        .HasForeignKey("Lyceum.Domain.Entities.History", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.News", b =>
                {
                    b.HasOne("Lyceum.Domain.Entities.Component", null)
                        .WithOne()
                        .HasForeignKey("Lyceum.Domain.Entities.News", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.ParentСommission", b =>
                {
                    b.HasOne("Lyceum.Domain.Entities.Component", null)
                        .WithOne()
                        .HasForeignKey("Lyceum.Domain.Entities.ParentСommission", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.Stakeholder", b =>
                {
                    b.HasOne("Lyceum.Domain.Entities.Component", null)
                        .WithOne()
                        .HasForeignKey("Lyceum.Domain.Entities.Stakeholder", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.Student", b =>
                {
                    b.HasOne("Lyceum.Domain.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("Lyceum.Domain.Entities.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lyceum.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("Lyceum.Domain.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("Lyceum.Domain.Entities.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
